Collection: group of objects combined into a single unit

why collections:
dynamic size
heterogenous value
problems in array
fixed size
homogeneous values

ArrayList al=new ArrayList();
al.add(10);
ArrayList al1=new ArrayList(al);
al1.add(20);
ArrayList al2=new ArrayList(5);
al2.add(10);

add(single object);
add(10)

addAll(Another ArrayList);
addAll(al)

add(index,Object)
add(3,100);

remove(object);
removeAll(collection);
retainAll(collection);

get(index):it returns index element

set(index,object):replace object at given index

contains(object):return true if object present else false
containsAll(Collection):return true if collection present else false

indexOf(object):return index position
lastIndexOf(object):return index position from last

size():return length

clear():removes all elements.

isEmpty():check if collection is empty or not


List vs Set:
List:it allows duplicate values
set:it does not allow duplicates

LinkedHashSet:remove duplicates
TreeSet:follow ascending order

Ex
package com.virtusa;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.TreeSet;

public class App {
    public static void main(String[] args) throws Exception {
        ArrayList al= new ArrayList();
    
        // al.add(1);"
        // al.add(2);
        // al.add('a');
        // al.add("anu");
        // al.add(true);
        // al.add(null);
        // // al.get(4);
        // // al.set(4,false);

        // al.add("anu");
        // System.out.println(al);//[1,2,a,anu,true,null,anu]
        // System.out.println(al.isEmpty());//false
        // al.clear();
        // System.out.println(al.isEmpty());//true

        ArrayList<Integer> al=new ArrayList<>();
        al.add(100);
        al.add(20);
        al.add(30);
        al.add(40);
        al.add(50);
        al.add(60);
        al.add(60);
        al.add(60);
        for(Integer x:al)
        {
            System.out.print(x+" ");
        }
       System.out.println();
        TreeSet<Integer> ts=new TreeSet<>(al);
        for(Integer x:ts)
        {
            System.out.print(x+" ");
        }
        

        // ArrayList al2=new ArrayList<>(al);
        // al2.add(100);
        // al2.remove(new Integer(100));
        // System.out.println(al2.containsAll(al));

//         ArrayList al3=new ArrayList<>();
//         al3.addAll(al);
//         al3.add(200);
//         al3.add(3,20.0);
//         //System.out.println(al3);
//         //al3.remove("anu");
//         //System.out.println(al3);//[1, 2, a, 20.0, anu, true, null, 200]
//         //al3.remove(2);
//         //al3.remove(new Integer(2));
//         //System.out.println(al3);
//         //al3.removeAll(al);
//         //al3.retainAll(al);
//         System.out.println(al3);

// // ArrayList al=new ArrayList<>();
// // al.add(1);
// // al.add(2);
// // al.add(6);
// // al.add(3);
// // al.add(4);
// // al.remove(new Integer(6));

    }
}